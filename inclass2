{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM7SN4BEFfjYMVJfDpwcwSb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/EunSeong-Jo/2025-1-myclass-BDA/blob/main/inclass/01w_bigdata_basic.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "xal--0V2bMzh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "outputId": "bb473025-5df2-4ca3-9c6b-6ad23f588aba"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'3.11.11 (main, Dec  4 2024, 08:55:07) [GCC 11.4.0]'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import sys\n",
        "sys.version"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import site\n",
        "site.getsitepackages()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S6fI38sWx16s",
        "outputId": "733ee0b7-38fa-4205-eda2-e2eb7ba611fe"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['/usr/local/lib/python3.11/dist-packages',\n",
              " '/usr/lib/python3/dist-packages',\n",
              " '/usr/lib/python3.11/dist-packages']"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "print(np.__version__)\n",
        "print(pd.__version__)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oKCWLLc-x59S",
        "outputId": "271de9b7-dd41-4160-d416-91d383f1d052"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.26.4\n",
            "2.2.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install koreanize-matplotlib"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1LQYThlmyEfB",
        "outputId": "650d6ed4-6b63-48ed-e096-5344e32cd169"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting koreanize-matplotlib\n",
            "  Downloading koreanize_matplotlib-0.1.1-py3-none-any.whl.metadata (992 bytes)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from koreanize-matplotlib) (3.10.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->koreanize-matplotlib) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->koreanize-matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->koreanize-matplotlib) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->koreanize-matplotlib) (1.4.8)\n",
            "Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib->koreanize-matplotlib) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->koreanize-matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->koreanize-matplotlib) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->koreanize-matplotlib) (3.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->koreanize-matplotlib) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib->koreanize-matplotlib) (1.17.0)\n",
            "Downloading koreanize_matplotlib-0.1.1-py3-none-any.whl (7.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.9/7.9 MB\u001b[0m \u001b[31m57.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: koreanize-matplotlib\n",
            "Successfully installed koreanize-matplotlib-0.1.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%config InlineBackend.figure_format = 'retina'"
      ],
      "metadata": {
        "id": "YJhYEI5fyI2d"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import koreanize_matplotlib\n",
        "\n",
        "plt.plot([-1, 0, 1, 2])\n",
        "plt.title('그래프 이름', fontweight='bold')\n",
        "plt.xlabel('x축 이름')\n",
        "plt.ylabel('y축 이름')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "ZfAtc_MHyh5H",
        "outputId": "3c477aac-26b8-4f2d-b4cd-ad131cb5ac5c"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABHUAAAOHCAYAAACpb3+xAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAewgAAHsIBbtB1PgAAryxJREFUeJzs3XlcVQX+//H3Zd8UBVwBd9wFwS23MrNVs3KXymnfRC3LmfammrGmxVJxGtummtTSMsvMMs00lywTEXfFDRRRVJB9uff8/piffkePIsiFw4XX8/Ho8R3u59xz3jTzLXh7PufaDMMwBAAAAAAAAJfiZnUAAAAAAAAAlB+lDgAAAAAAgAui1AEAAAAAAHBBlDoAAAAAAAAuiFIHAAAAAADABVHqAAAAAAAAuCBKHQAAAAAAABdEqQMAAAAAAOCCKHUAAAAAAABcEKUOAAAAAACAC6LUAQAAAAAAcEGUOgAAAAAAAC6IUgcAAAAAAMAFUeoAAAAAAAC4IEodAAAAAAAAF0SpAwAAAAAA4IIodQAAAAAAAFwQpQ4AAAAAAIALotQBAAAAAABwQZQ6AAAA5XDq1Cn16NFDnTt3VufOnRUZGakdO3ZIktLT0+Xj4yObzXb2r3fffdfixNXD7Nmzz/n74u3trZMnT17yfePHjz/nfZf7l5ubmxo3bqyPPvqo8r9ZAACqiIfVAQAAAKqaw+HQqVOnZBhGqce5u7srMDBQbm7/9+dgWVlZ2rhx4znHpaenq0OHDsrPz1dhYeE5s9OnTzsvuAs7fvz4OV8XFRXp9OnTCgoKKvV9hw8fdsr1DcNQenq6pk6dqrvuussp5wQAwGqUOgAAwFKrV6/Wc889J7vd7pTz+fn5qV+/fnrqqafk6el5wWMmTZqk+Pj4Mp2vfv36+uKLLzRw4ECn5Ptf0dHR2rx5s9PPO2XKFL322mtOP+/KlSv1n//8R4mJiUpPT1dQUJDatGmjESNGaNiwYfLx8XH6NW02m1PPl52d7dTzAQBgJUodAABgqe3bt2v16tVOPeePP/6oRo0a6cEHH7zgvDy/2J86dUr//ve/K6XU2bNnj9PPKUn79u1z6vmOHDmi++67T0uXLj3n9cOHDyspKUlfffWVIiIi9OGHH6pfv35OvfaECRPUrl27y37/F198oeTk5LNfX+ruLAAAXAmlDgAAqJGceQdMTk6O087lao4cOaJ+/fpp//79pR63Z88eDRo0SIsXL9a1117rtOsPHDhQ/fr1U2ZmphwOR7nfv3379nNKHQAAahJKHQAAYKl69erJZrM5/Q6KkpKSi86GDh2qrKysC17TMAytWLFCubm557xWGe68804lJSVJ+m/eDRs2nDNv1qyZwsPDTe9LSko651k9AQEBioqKkvTfdaUbb7zRKfkcDoeGDRt2yULnjMLCQg0bNkw7duxQWFiYUzJ88MEHiouLU0FBgVPOBwBATUKpAwAALDVmzBiNGTOmQufYu3evIiIiznnNy8vroscPGzZMw4YNu+h8wIABWrVqVYUylcU777xz9j9nZGSoQYMG58zvv/9+Pfvss6b39evXT2vXrj37dbt27bRmzRqn5/vggw9MRVODBg309ttvq1+/ftq1a5eeeOIJbdmy5ew8JydHjz32mBYsWOCUDLNmzXJqoePv7++0cwEAYDVKHQAA4PIudDfLxR6SjLJ78803z/na29tbP/7449m7gpo1a6ZVq1apa9euOnjw4NnjFi5cqJSUlAv+91Jezn6wcWU8GwkAAKtQ6gAAAJd3oVWr0u7UwaX9+uuv2rVr1zmvPfjgg2cLnTPq1aunqVOn6vbbbz/7msPh0KeffqqnnnqqwjnOX33r3LmzXn/99XKfx2azKSQkRN26datwJgAAqgtKHQAA4PIuVOpwp07FXGj97E9/+tMFjx0xYoQeeOCBc55DtHr1aqeUOucLDg7WDTfc4PTzAgDgiih1AACAy7Pb7abXAgICSj1+xYoVSktLM90JYhiGDhw44OyILmfjxo3nfF23bl1FR0df8FgvLy/17t1by5cvP/va77//Xim5Vq1aJZvNVqFzvPTSS3ruueeclAgAAOtQ6gAAAJeXl5dnei0wMPCixz/66KOKj48v8/kvVSK88847+vbbb8/5RCpXd/jw4XO+btu2bal/H9q3b39OqXPixAkVFRVVeA3Ox8enQu+/kBMnTjj9nAAAWIFSBwAAuLwLPUy3bt26Fz3+119/Ldf5Q0JCSp3Pnz+/XOdzBadOnTrn6/r165d6fL169UyvZWZmqmHDhhXK0aNHD23btq1C5zhfRe/0AQCguqDUAQAALq+8pU5xcXGZzx0YGHjRZ8lUxI8//qjXX39dDofjopk++ugj/fzzz6bXt27des7Xu3fv1qBBg85+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BQYGKi8vr9i6h4eH0tLSVK1atQru7Mpee+01LV68WHPnztU111xz2XHnz5/Xo48+qvz8/FLfw8fHR5GRkfrnP/8pi8VSnnYBAMD/R6gDAABgJ25ubmrdurVyc3OLrXt5ecnd3d3hfaSmpionJ0f16tUr0f327dun+Ph4paSkXHFcbm6u5s2bp4KCgjL31qRJE/Xp06fM1wMAgL8Q6gAAANiJp6en4uPjTbl3enq6pkyZoo8++kinT5++0M8dd9yhl156SW3bti33PapXr16mp3Qk6YknntD06dP122+/lbsPAADwJ0IdAACAchg/frzWrl1b4vEWi0WBgYHq3r27pkyZIn9//3L3cOzYMfXp00f79u1Ts2bNNGTIEAUEBOiXX37RF198oTVr1mjx4sW67bbbyn2vsio6clZYWGhaDwAAVDWEOgAAAOWQlJSk/fv3l/q6X375RX369Cl30GK1WjVkyBDt27dPDz30kN599115ePz1R7wVK1Zo6NChGjZsmH799Ve1bNmyXPcrq+zsbEmqkONnAAC4Cr79CgAAoByWLVsmwzBK9LN69eoLT+YMHTpUt9xyi13uv3HjRnXp0kXvvffeRYGOJN1555165ZVXlJmZqaeeeqrc93vqqadUs2ZNWSyWUv28+eabkqRmzZqVuwcAAPAnntQBAABwoJycHC1atEgzZszQ7t275e/vr9mzZ2v06NF2mX/u3LmSpGeffVZubsX//7rx48dr2rRpWrlypX7//XeFhYWV6V7nz5/XtGnT5Ovrq3vvvfey9yuOj4+POnXqpOjo6DLdGwAA2CLUAQAAsDOr1aoffvhBn376qb744gtlZGTI09NTDz30kJ599lmFhoba5T65ubn68ccf5evrq5tuuumy47y9vXXXXXdp9uzZWrVqlcaNG1em+2VkZMgwDIWHh2vBggVlbRsAANgJx68AAIBL+vDDD2WxWNSxY0fl5eUVO+aFF16QxWIp0bGltLQ0LV68WMOHD1edOnV0/fXX6+OPP1ZGRoakP7/u/ODBg1qwYIF++OEHpaenl/sz7N+/X+fPn1dERIS8vLyuOLZXr16SpG3btpX5fhaLpczXAgAA++NJHQAA4JJGjhypBQsW6KefftLUqVP10ksvXVT/9ddfNXXqVDVs2FDPPfeczfWpqalavny5tm7dqtjYWO3evVuGYUiSgoOD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\n"
          },
          "metadata": {
            "image/png": {
              "width": 570,
              "height": 451
            }
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 시리즈 개요"
      ],
      "metadata": {
        "id": "2HvSGbGy10vo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "s = pd.Series([1, 3, 5, np.nan, 6, 8], name='first')\n",
        "\n",
        "s"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "bgeFOZQ8y0IK",
        "outputId": "29116faf-a115-4b4c-c75e-e0a799cdf40f"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    1.0\n",
              "1    3.0\n",
              "2    5.0\n",
              "3    NaN\n",
              "4    6.0\n",
              "5    8.0\n",
              "Name: first, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>first</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('name = ', s.name)\n",
        "print('index = ', s.index)\n",
        "print('value = ', s.values)\n",
        "print('shape = ', s.shape)\n",
        "print('size = ', s.size)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wpN0crFw2g1z",
        "outputId": "a6005c4f-bcd5-4961-f274-e75246eea516"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "name =  first\n",
            "index =  RangeIndex(start=0, stop=6, step=1)\n",
            "value =  [ 1.  3.  5. nan  6.  8.]\n",
            "shape =  (6,)\n",
            "size =  6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 시리즈 인덱싱과 슬라이싱"
      ],
      "metadata": {
        "id": "g2RNmKHh3EbU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "s[1:5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "yO3xwLin3Kki",
        "outputId": "58862a6b-3f44-45d8-bc57-12e7a447a8ec"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    3.0\n",
              "2    5.0\n",
              "3    NaN\n",
              "4    6.0\n",
              "Name: first, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>first</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s[1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j0bv_bZx3M7L",
        "outputId": "ac5ab83a-7cfc-4d64-f934-4c642851eeb0"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.0"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s[2] = 50\n",
        "\n",
        "s"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "MnFFUOKN3Ups",
        "outputId": "a8e7cb84-4a7f-4b40-fee7-21666e2664a2"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     1.0\n",
              "1     3.0\n",
              "2    50.0\n",
              "3     NaN\n",
              "4     6.0\n",
              "5     8.0\n",
              "Name: first, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>first</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s.index"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XiyKRCjP3XXe",
        "outputId": "26267ce9-4ef8-455e-b349-cbe4710db03b"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RangeIndex(start=0, stop=6, step=1)"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s.index = list('abcdef')\n",
        "\n",
        "s"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "Lg8F4_5c3fRb",
        "outputId": "6fbaafdf-fddc-44ee-9916-59944655a74f"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a     1.0\n",
              "b     3.0\n",
              "c    50.0\n",
              "d     NaN\n",
              "e     6.0\n",
              "f     8.0\n",
              "Name: first, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>first</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>a</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>b</th>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>c</th>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>e</th>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>f</th>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s['a']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t-IUvbI13sql",
        "outputId": "0476222a-2549-491f-b264-d50f3b7c911c"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PTcHz6V_3xq5",
        "outputId": "ebce3368-db0f-4cb3-9361-9c4bd778c657"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-21-c9c96910e542>:1: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  s[0]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s[0:3]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "iydHwIkT34Fc",
        "outputId": "48588a6b-383f-44b8-9d01-b0c8a641278f"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a     1.0\n",
              "b     3.0\n",
              "c    50.0\n",
              "Name: first, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>first</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>a</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>b</th>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>c</th>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s['a':'d']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "wmkO7jY44B9X",
        "outputId": "491fdd0c-a2a9-4216-f135-fc74a3e186fb"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a     1.0\n",
              "b     3.0\n",
              "c    50.0\n",
              "d     NaN\n",
              "Name: first, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>first</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>a</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>b</th>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>c</th>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1 = s[1:4]\n",
        "\n",
        "s1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "Z3DWiZJX4QUw",
        "outputId": "d81ecfbb-5064-4dc1-ebd6-6f9b9793ea8b"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "b     3.0\n",
              "c    50.0\n",
              "d     NaN\n",
              "Name: first, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>first</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>b</th>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>c</th>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g-TLmdWQ4kwS",
        "outputId": "f6234c8a-7824-4fc4-ef3d-28a366657d1a"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-25-bfed54b371ac>:1: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  s1[0]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.0"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s.index"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EW18eHSG4o8A",
        "outputId": "31ea1107-310d-41dd-c2fe-bc5738595c70"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['a', 'b', 'c', 'd', 'e', 'f'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s.index = np.arange(1, 7)\n",
        "\n",
        "s"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "HuQIWjcq5B3e",
        "outputId": "d4042906-8e7d-4f38-9e4d-a99438eac765"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1     1.0\n",
              "2     3.0\n",
              "3    50.0\n",
              "4     NaN\n",
              "5     6.0\n",
              "6     8.0\n",
              "Name: first, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>first</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 584
        },
        "id": "s5SHAGnR5Hdq",
        "outputId": "cdf055c8-c4ff-4082-990d-191d25889e06"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "0",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3805\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3806\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.Int64HashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.Int64HashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 0",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-28-c9c96910e542>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ms\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1120\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mkey_is_scalar\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1121\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1122\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1123\u001b[0m         \u001b[0;31m# Convert generator to list before going through hashable part\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_get_value\u001b[0;34m(self, label, takeable)\u001b[0m\n\u001b[1;32m   1235\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1236\u001b[0m         \u001b[0;31m# Similar to Index.get_value, but we do not fall back to positional\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1237\u001b[0;31m         \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1238\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1239\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3810\u001b[0m             ):\n\u001b[1;32m   3811\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3812\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3813\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3814\u001b[0m             \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 0"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s[1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T4ORMsOm5KOI",
        "outputId": "83d404a9-a70c-4794-aee6-f01836d43029"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s[1:4]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "w0Lha8vY5OJ-",
        "outputId": "1289e264-22c1-4668-f086-a5a9e6b11e3f"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2     3.0\n",
              "3    50.0\n",
              "4     NaN\n",
              "Name: first, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>first</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 시리즈 고급 인덱싱"
      ],
      "metadata": {
        "id": "E2uwoGYH52zI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "age = pd.Series([19,48,23,58,37,29,57], index=list('ABCDEFG'), name='나이')\n",
        "\n",
        "age"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "4hVtEUpn5WCx",
        "outputId": "97fd80a8-6e0d-4839-d802-66314e1e695b"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "A    19\n",
              "B    48\n",
              "C    23\n",
              "D    58\n",
              "E    37\n",
              "F    29\n",
              "G    57\n",
              "Name: 나이, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>나이</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>A</th>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B</th>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C</th>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>D</th>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>E</th>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>F</th>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>G</th>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age[[1, 3, 5]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "3Ib9x0fG6Lq2",
        "outputId": "63d6a403-c955-48c2-be07-10dc43932448"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-34-f4f4e44c80e2>:1: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  age[[1, 3, 5]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "B    48\n",
              "D    58\n",
              "F    29\n",
              "Name: 나이, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>나이</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>B</th>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>D</th>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>F</th>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age[['A', 'C']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 146
        },
        "id": "7UJ0xRvj6YVj",
        "outputId": "7183fe9c-1d36-44fc-e5fb-7bd1237e2a38"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "A    19\n",
              "C    23\n",
              "Name: 나이, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>나이</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>A</th>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C</th>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age['F']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VH4RlbK46oGl",
        "outputId": "8aac0004-06ab-4b34-9d16-1e777f739edf"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "29"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age[['F']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "id": "xEZxqNDT6wKC",
        "outputId": "8c043210-e859-49ed-f237-4664b3149609"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "F    29\n",
              "Name: 나이, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>나이</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>F</th>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 불리안 인덱싱"
      ],
      "metadata": {
        "id": "IzeoHrr77GeZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "s = pd.Series([2, 4, -1, 3, -6, 7, 9])\n",
        "\n",
        "s"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "Z-CDm6Bn6zc9",
        "outputId": "c9002401-5992-4416-ff9e-30e5ab0d9470"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    2\n",
              "1    4\n",
              "2   -1\n",
              "3    3\n",
              "4   -6\n",
              "5    7\n",
              "6    9\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s > 0"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "sRYvwR5d7UFI",
        "outputId": "747600aa-1257-4991-8991-0f276d724b5d"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     True\n",
              "1     True\n",
              "2    False\n",
              "3     True\n",
              "4    False\n",
              "5     True\n",
              "6     True\n",
              "dtype: bool"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> bool</label>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s[s > 0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "EtbixY0-7VUd",
        "outputId": "6aad0d3a-743e-4d14-aa14-2985d4de7df1"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    2\n",
              "1    4\n",
              "3    3\n",
              "5    7\n",
              "6    9\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s[s % 2 == 0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "lz6abWSM7e8I",
        "outputId": "58e07d9b-c437-4b83-d64d-e89e8958b2ed"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    2\n",
              "1    4\n",
              "4   -6\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "끝"
      ],
      "metadata": {
        "id": "1IEsfH327yKh"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8DqN0Ff37raV"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
